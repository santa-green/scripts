ALTER PROCEDURE [dbo].[ap_Create_Hotline_pl] @api_l VARCHAR(500) = '', @key VARCHAR(500) = '', @admin_adress VARCHAR(500) = '', @Test INT = 0
AS
BEGIN
/*
Формируем основу xml, который будет хранить прайс-лист для Hotline.
*/

/*
--@Test = 0 - Рабочий режим.
--@Test = 1 - Рабочий режим для админа.
--@Test = 2 - Тестовый режим без изменения таблиц.

EXEC ap_Create_Hotline_pl @api_l = '4a31bd883165bfd2bb8932c6287e7b9c', @key = '6bab3199775c589f2922cd5bdb48a10b', @admin_adress = 'vintagemarket-dev.myshopify.com', @Test = 1
*/

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*CHANGELOG*/
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Ниже идет предварительная настройка временных таблиц и объявление переменных.
SET TEXTSIZE 2147483647;
SET NOCOUNT ON

DECLARE @temp TABLE (res VARCHAR(MAX))

DECLARE @URI VARCHAR(3000)
	   ,@methodName VARCHAR(50)
	   ,@proxy VARCHAR(50) 
	   ,@proxySettings VARCHAR(50)
	   ,@objectID INT
	   ,@hResult INT
	   ,@source VARCHAR(255)
	   ,@desc VARCHAR(255)
	   ,@login_proxy VARCHAR(200) = 'CONST\vintageshopify'
	   ,@for_proxy VARCHAR(100) = (SELECT CONVERT(VARCHAR(100), DecryptByPassPhrase(ORIGINAL_LOGIN(), 0x010000008031F55516F8B14295198F75BC4E74AC92D4D00FCE81357226B84D9109E90731 )))
	   ,@site VARCHAR(3000) = 'https://' + @api_l + ':' + @key + '@' + @admin_adress

--Плачу на техно.
IF @Test != 0
BEGIN
	SET @for_proxy = (SELECT CONVERT(VARCHAR(100), DecryptByPassPhrase(ORIGINAL_LOGIN(), 0x010000006F172BCB88E67FBA563BEF67FB02F5319B61CD88F32C063328550C861DE6E0CD)))
END;

DECLARE @statusText VARCHAR(1000), @status VARCHAR(1000)

DECLARE @f INT = 0
DECLARE @link VARCHAR(8000)
WHILE(@f != 2)
BEGIN
--Формируем особый URL-адрес, который достанет первые товары. 
SELECT @URI = CASE WHEN @f = 0
					THEN @site
					     --Достаем определенные поля товаров.
					     + '/admin/api/2020-01/products.xml?limit=250;fields=id,variants,handle,image'
					ELSE @URI END
	  ,@methodName = 'GET'
	  ,@proxy = '2' 
	  ,@proxySettings = '10.1.0.16:8080'

	IF 1 = 1
	BEGIN
			IF 	@methodName = ''
			BEGIN
				SELECT FailPoINT = 'Method Name must be set'
				RETURN
			END 

			EXEC 	@hResult = sp_OACreate 'WinHttp.WinHttpRequest.5.1', @objectID OUT

			IF @hResult <> 0
			BEGIN
				EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT 
				SELECT 	hResult = convert(varbinary(4), @hResult), 
						source = @source, 
						description = @desc,
						FailPoINT = 'Create failed',
						MedthodName = @methodName
				GOTO global_destroy
				RETURN
			END

			-- open the destination URI with Specified method
			EXEC @hResult = sp_OAMethod @objectID, 'open', null, @methodName, @URI, 'false'
			IF @hResult <> 0
			BEGIN
				EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT 
				SELECT 	hResult = convert(varbinary(4), @hResult), 
					source = @source, 
					description = @desc,
					FailPoINT = 'Open failed',
					MedthodName = @methodName
				GOTO global_destroy
				RETURN
			END

			-- Особый хэдер URL-запроса для Shopify, для того, чтобы обойти аутентификацию.
			EXEC @hResult = sp_OAMethod @objectID, 'setRequestHeader', null, 'X-Shopify-Access-Token', @key
			IF @hResult <> 0
			BEGIN
				EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT 
				SELECT 	hResult = convert(varbinary(4), @hResult), 
					source = @source, 
					description = @desc,
					FailPoINT = 'SetRequestHeader failed: Content-Type',
					MedthodName = @methodName
				GOTO global_destroy
				RETURN
			END

			/*Устанавливаем логин и пароль для прокси-сервера.*/
			EXEC @hResult = sp_OAMethod @objectID, 'setCredentials', null, @login_proxy, @for_proxy, 1
			IF @hResult <> 0
			BEGIN
				EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT 
				SELECT 	hResult = convert(varbinary(4), @hResult), 
					source = @source, 
					description = @desc,
					FailPoINT = 'setProxyCredentials failed',
					MedthodName = @methodName
				GOTO global_destroy
				RETURN
			END

			--Делаем так, чтобы URL-запрос пошел через прокси-сервер.
			EXEC @hResult = sp_OAMethod @objectID, 'setProxy', NULL,  @proxy, @proxySettings
			IF @hResult <> 0
			BEGIN
				EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT 
				SELECT 	hResult = convert(varbinary(4), @hResult), 
					source = @source, 
					description = @desc,
					FailPoINT = 'SetProxy'
				GOTO global_destroy
				RETURN
			END
		
			--Отправляем запрос.
			EXEC @hResult = sp_OAMethod @objectID, 'send', null
			IF 	@hResult <> 0
			BEGIN
				EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT 
				SELECT 	hResult = convert(varbinary(4), @hResult), 
					source = @source, 
					description = @desc,
					FailPoINT = 'Send failed',
					MedthodName = @methodName
				GOTO global_destroy
				RETURN
			END

			-- Get status text
			EXEC sp_OAGetProperty @objectID, 'StatusText', @statusText out 
			EXEC sp_OAGetProperty @objectID, 'Status', @status out 

			--Достаем из заголовка ссылки.
			EXEC @hResult = sp_OAMethod @objectID, 'getResponseHeader', @link OUT, 'Link'
			IF 	@hResult <> 0
			BEGIN
				EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT 
				SELECT 	hResult = convert(varbinary(4), @hResult), 
					source = @source, 
					description = @desc,
					FailPoINT = 'HEADER',
					MedthodName = @methodName
				GOTO global_destroy
				RETURN
			END

			-- Get response text
			INSERT INTO @temp
				 EXEC sp_OAGetProperty @objectID, 'responseText'

			IF @hResult <> 0
			BEGIN
				EXEC sp_OAGetErrorInfo @objectID, @source OUT, @desc OUT 
				SELECT 	hResult = convert(varbinary(4), @hResult), 
					source = @source, 
					description = @desc,
					FailPoINT = 'ResponseText failed',
					MedthodName = @methodName
				GOTO global_destroy
				RETURN
			END
	END;

	--Если нет ссылки на страницу "дальше".
	IF (SELECT CHARINDEX('rel="next"', @link)) = 0
	BEGIN
		SET @f = 2
	END;
	ELSE
	BEGIN
		SELECT @f = 1
			   --Если ссылка на страницу "дальше" есть, то достаем ее.
			  ,@URI = SUBSTRING(PString,CHARINDEX('https://', PString), CHARINDEX('>; rel="next"', PString) - CHARINDEX('https://', PString)) FROM af_SplitString(@link, ',') WHERE PString LIKE '%rel="next"%'
	END;
END;

--Удаляем мусор.
UPDATE @temp SET res = REPLACE(res, '<?xml version="1.0" encoding="UTF-8"?>', '');

--Дальше обрабатываем полученный ответ.
DECLARE @prods TABLE (ProdInfo XML)

INSERT INTO @prods
SELECT CAST(res AS XML) FROM @temp
--SELECT * FROM @prods

IF @Test = 2
BEGIN
	
	SELECT *
	FROM (
	SELECT prods.pr.value('(id)[1]', 'bigint') AS 'ShopifyID'
		  ,CASE WHEN CAST (pr.query('data(variants/variant/sku)') AS VARCHAR(10)) LIKE '%[^0-9]%' 
				THEN 0
				ELSE CAST( (CAST (pr.query('data(variants/variant/sku)') AS VARCHAR(10)) ) AS INT) END 'ProdID'
		  ,'https://vintagemarket.com.ua/products/' + prods.pr.value('(handle)[1]', 'varchar(250)') AS 'ShopifyURI'
		  ,prods.pr.value('(image/src)[1]', 'varchar(4000)') AS 'ShopifyImageURI'
	FROM @prods p CROSS APPLY p.ProdInfo.nodes('products/product') prods(pr)
	) AS q1
	WHERE q1.ShopifyImageURI IS NULL AND q1.ProdID != 0

	GOTO global_destroy	

END;

DECLARE @TableProds table(ProdID int NULL, PricePromo numeric(21,9) NULL, Price numeric(21,9) NULL) 
INSERT INTO @TableProds 
	--список товаров для продажи в Алло
	SELECT ProdID,АкционнаяЦена,Цена FROM (
	SELECT ProdID,UAProdName
	,max(case when TypeStock = 'Днепр' then Qty else 0 end) 'Д'
	,max(case when TypeStock = 'Киев' then Qty else 0 end) 'К'
	,max(case when TypeStock = 'Харьков' then Qty else 0 end) 'Х'
	,max(PromoPriceCC) АкционнаяЦена
	,max(PriceCC) Цена
	FROM
	(
		SELECT m.ProdID,m.Qty,'Днепр' TypeStock,epa.PromoPriceCC ,ep.PriceCC ,rp.UAProdName FROM [av_VC_ExportRemsR_Dnepr_Shopify] m--[av_VC_ExportRemsR_Dnepr] m
		JOIN r_Prods rp WITH(NOLOCK) ON rp.ProdID = m.ProdID
		JOIN [av_VC_ExportPrices] ep ON ep.ProdID = m.ProdID AND ep.RegionID = 1
		LEFT JOIN [av_VC_ExportPromos] epa ON ep.ProdID = epa.ProdID AND epa.RegionID = 1 and dbo.zf_GetDate(GETDATE()) BETWEEN epa.BDate and epa.EDate
			UNION ALL
		SELECT m.ProdID,m.Qty,'Киев' TypeStock,epa.PromoPriceCC ,ep.PriceCC ,rp.UAProdName FROM [av_VC_ExportRemsR_Kiev_Shopify] m--[av_VC_ExportRemsR_Harkov] m
		JOIN r_Prods rp WITH(NOLOCK) ON rp.ProdID = m.ProdID
		JOIN [av_VC_ExportPrices] ep ON ep.ProdID = m.ProdID AND ep.RegionID = 2
		LEFT JOIN [av_VC_ExportPromos] epa ON ep.ProdID = epa.ProdID AND epa.RegionID = 5 and dbo.zf_GetDate(GETDATE()) BETWEEN epa.BDate and epa.EDate
			UNION ALL
		SELECT m.ProdID,m.Qty,'Харьков' TypeStock,epa.PromoPriceCC ,ep.PriceCC ,rp.UAProdName FROM [av_VC_ExportRemsR_Harkov_Shopify] m--[av_VC_ExportRemsR_Harkov] m
		JOIN r_Prods rp WITH(NOLOCK) ON rp.ProdID = m.ProdID
		JOIN [av_VC_ExportPrices] ep ON ep.ProdID = m.ProdID AND ep.RegionID = 5
		LEFT JOIN [av_VC_ExportPromos] epa ON ep.ProdID = epa.ProdID AND epa.RegionID = 5 and dbo.zf_GetDate(GETDATE()) BETWEEN epa.BDate and epa.EDate
	) s1
	group by ProdID,UAProdName
	Having ProdID in 
	(
	
	SELECT ProdID FROM r_ShopifyProds WHERE ProdID NOT IN (0) AND UpdateState NOT IN (-1,6,7,8,9,10)
	)
	) s2 
	where (Д > 0 OR Х > 0 OR К > 0) 

SELECT * FROM @TableProds where PricePromo >= Price

IF OBJECT_ID (N'dbo.at_Hotline_PL', N'U') IS NOT NULL DROP TABLE dbo.at_Hotline_PL
CREATE TABLE dbo.at_Hotline_PL ( ID INT IDENTITY(1,1), XML VARCHAR(MAX))

------------------------------------Начало вормирования хэдера----------------------------------------
INSERT INTO dbo.at_Hotline_PL SELECT ('<?xml version="1.0" encoding="windows-1251" ?>') AS txt -- добавляем хэдер
INSERT INTO dbo.at_Hotline_PL SELECT ('<price><date>' + (CONVERT(VARCHAR(16),GETDATE(),120)) + '</date>') AS txt -- добавляем дату
INSERT INTO dbo.at_Hotline_PL SELECT '<firmName>Винтаж</firmName>' -- добавляем название фирмы
INSERT INTO dbo.at_Hotline_PL SELECT '<firmId>36860</firmId>' -- добавляем код фирмы
INSERT INTO dbo.at_Hotline_PL SELECT '<categories>' -- добавляем открывающий тег для категорий
INSERT INTO dbo.at_Hotline_PL --добавляем категории
	SELECT ('<category><id>' + CONVERT(VARCHAR(20), m.PGrID5) + '</id><name>' + m.PGrName5 +'</name></category>') AS txt 
	FROM (SELECT DISTINCT rpc.PGrID5, rpc.PGrName5 FROM r_Prods rp
			JOIN at_r_ProdG5 rpc WITH(NOLOCK) ON rpc.PGrID5 = rp.PGrID5
			WHERE rp.ProdID in (select ProdID from @TableProds)
			) AS m
	ORDER BY m.PGrName5
INSERT INTO dbo.at_Hotline_PL SELECT '</categories>' -- добавляем закрывающий тег для категорий
----------------------------Конец формирования хэдера-----------------------------------------

----------------------------Начало формирования списка товаров--------------------------------
INSERT INTO dbo.at_Hotline_PL SELECT '<items>' -- добавляем открывающий тег для списка товаров

INSERT INTO dbo.at_Hotline_PL --добавляем товары
	SELECT  ('<item>' +
			+'<id>' + CONVERT(VARCHAR(20), m.ProdID) + '</id>'
			+'<categoryId>' + CONVERT(VARCHAR(20), m.PGrID5) + '</categoryId>'
			+'<categoryName>' + [dbo].[af_ReplaceForXML]( (SELECT top 1 p5.PGrName5 FROM at_r_ProdG5 p5 where p5.PGrID5 = m.PGrID5) ) + '</categoryName>'
			+'<barcode>' + [dbo].[af_ReplaceForXML]( m.BarCode ) + '</barcode>'
			+'<name>' + [dbo].[af_ReplaceForXML]( m.ProdName ) + '</name>'
			+'<priceRUAH>' + isnull(m.PricePromo,m.PriceMC) + '</priceRUAH>'
			+'<oldprice>' + case when m.PricePromo is null then '' else m.PriceMC end + '</oldprice>'
			+'<stock>'+ 'В наличии' + '</stock>'
			+'<vendor>'+ [dbo].[af_ReplaceForXML]( isnull( (SELECT top 1 p6.PGrName6 FROM at_r_ProdG6 p6 where p6.PGrID6 = m.PGrID6) ,'') ) + '</vendor>'
			+'<guarantee type="manufacture">' + '12' + '</guarantee>'
			+ '<param name="Оригинальность">Оригинал</param>'
			+ '<url>' + uris.ShopifyURI + '</url>'
			+ '<image>' + uris.ShopifyImageURI + '</image>'
			+'</item>') AS txt
	 FROM (
			SELECT rp.ProdID, rp.PGrID5,rp.PGrID6, ISNULL(rpmq.BarCode, 0) BarCode, rp.Country, rp.ProdName
			, CONVERT(VARCHAR(20), CAST(tp.PricePromo AS NUMERIC(21,2)) ) PricePromo
			, CONVERT(VARCHAR(20), CAST(tp.Price AS NUMERIC(21,2)) ) PriceMC
		    FROM r_Prods rp 
			JOIN r_ProdMQ rpmq WITH(NOLOCK) ON rpmq.ProdID = rp.ProdID AND rp.UM = rpmq.UM
			JOIN @TableProds tp ON tp.ProdID = rp.ProdID
		  ) AS m
		  LEFT JOIN
		  (
		  	SELECT prods.pr.value('(id)[1]', 'bigint') AS 'ShopifyID'
				  ,CASE WHEN CAST (pr.query('data(variants/variant/sku)') AS VARCHAR(10)) LIKE '%[^0-9]%' 
						THEN 0
						ELSE CAST( (CAST (pr.query('data(variants/variant/sku)') AS VARCHAR(10)) ) AS INT) END 'ProdID'
				  ,'https://vintagemarket.com.ua/products/' + prods.pr.value('(handle)[1]', 'varchar(250)') AS 'ShopifyURI'
				  ,prods.pr.value('(image/src)[1]', 'varchar(4000)') AS 'ShopifyImageURI'
			FROM @prods p CROSS APPLY p.ProdInfo.nodes('products/product') prods(pr)
		  ) AS uris ON uris.ProdID = m.ProdID
		  WHERE uris.ShopifyImageURI IS NOT NULL
							
INSERT INTO dbo.at_Hotline_PL SELECT '</items>' -- добавляем закрывающий тег для списка товаров
----------------------------Конец формирования списка товаров--------------------------------
/*
< (заменить на &lt;)
> (заменить на &gt;)
& (замените на &amp;)
' (замените на &apos;)
" (замените на &quot;)
*/

INSERT INTO dbo.at_Hotline_PL SELECT '</price>' -- добавляем закрывающий тег для списка товаров

SELECT xml FROM dbo.at_Hotline_PL ORDER BY ID

global_destroy:
	EXEC sp_OADestroy @objectID

END